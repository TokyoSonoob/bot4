// index.js
const {
  Client,
  GatewayIntentBits,
  Partials,
  Events,
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  PermissionsBitField,
  ChannelType,
} = require("discord.js");
require("dotenv").config();

const LOG_GUILD_ID = "1336555551970164839";
const LOG_CHANNEL_ID = "1412517818867384482";

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildInvites
  ],
  partials: [Partials.GuildMember, Partials.User],
});

const { db, admin } = require("./firebase");
require("./music")(client);
require("./server");
require("./welcome")(client);
require("./goodbye")(client);
require("./ticket")(client);
require("./addticket")(client);
require("./create")(client);
require("./room")(client);
require("./delete")(client);
require("./em")(client);
require("./verify")(client);
require("./invite")(client);
require("./private")(client);
require("./help")(client);
require("./sound")(client);
require("./fix")(client);
/* ---------- helpers ---------- */
function buildReportEmbed() {
  const list = client.guilds.cache
    .map(g => `**‚Ä¢ ${g.name} | ${g.memberCount ?? "?"}**`)
    .join("\n")
    .slice(0, 3800);

  return new EmbedBuilder()
    .setTitle("Bot2x Tester")
    .setDescription(list || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
    .addFields({ name: "All Server", value: `**${client.guilds.cache.size}**`, inline: true })
    .setColor(0x7c3aed)
    .setTimestamp();
}

/** ‡∏™‡∏£‡πâ‡∏≤‡∏á Select Menu ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 25 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î Discord) */
function buildGuildSelectRow() {
  const options = client.guilds.cache
    .map(g => ({
      label: g.name.slice(0, 100),
      value: g.id, // ‡πÉ‡∏ä‡πâ guildId ‡πÄ‡∏õ‡πá‡∏ô value
      description: `ID: ${g.id}`.slice(0, 100),
    }))
    .slice(0, 25); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 25

  const menu = new StringSelectMenuBuilder()
    .setCustomId("pick_guild_invite")
    .setPlaceholder("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
    .addOptions(options);

  return new ActionRowBuilder().addComponents(menu);
}

/** ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á invite ‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏±‡πâ‡∏ô */
function findInviteChannel(guild) {
  // 1) systemChannel ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const me = guild.members.me;
  const canInvite = (ch) =>
    ch?.isTextBased?.() &&
    ch.viewable &&
    me?.permissionsIn(ch)?.has(PermissionsBitField.Flags.CreateInstantInvite);

  if (guild.systemChannel && canInvite(guild.systemChannel)) return guild.systemChannel;

  // 2) ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î ‡πÜ ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const candidate = guild.channels.cache.find(
    (ch) =>
      ch.type === ChannelType.GuildText &&
      canInvite(ch)
  );
  return candidate || null;
}

/** ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï/‡∏™‡∏£‡πâ‡∏≤‡∏á log ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≥ messageId ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Firestore ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏™‡πà Select Menu */
async function upsertLogMessage() {
  try {
    const channel = await client.channels.fetch(LOG_CHANNEL_ID).catch(() => null);
    if (!channel || !channel.isTextBased()) return;

    const ref = db.collection("botLog").doc("presenceReport"); // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const snap = await ref.get();
    const embed = buildReportEmbed();
    const components = [buildGuildSelectRow()];

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ messageId -> ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
    if (snap.exists && snap.data()?.messageId) {
      const messageId = snap.data().messageId;
      const msg = await channel.messages.fetch(messageId).catch(() => null);
      if (msg) {
        await msg.edit({ embeds: [embed], components });
        console.log("üìù Updated existing log message");
        return;
      }
    }

    // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏° -> ‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å messageId
    const sent = await channel.send({ embeds: [embed], components });
    await ref.set(
      {
        guildId: LOG_GUILD_ID,
        channelId: LOG_CHANNEL_ID,
        messageId: sent.id,
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      },
      { merge: true }
    );
    console.log("‚úÖ Created new log message and stored messageId");
  } catch (e) {
    console.error("upsertLogMessage error:", e);
  }
}

/* ---------- events ---------- */
client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
  await upsertLogMessage();
});

// ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤/‡∏•‡∏ö‡∏≠‡∏≠‡∏Å -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô + ‡πÄ‡∏°‡∏ô‡∏π
client.on(Events.GuildCreate, async () => { await upsertLogMessage(); });
client.on(Events.GuildDelete, async () => { await upsertLogMessage(); });

/** ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á invite */
/** ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á invite */
client.on(Events.InteractionCreate, async (interaction) => {
  if (!interaction.isStringSelectMenu()) return;
  if (interaction.customId !== "pick_guild_invite") return;

  const guildId = interaction.values?.[0];
  const targetGuild = client.guilds.cache.get(guildId);
  if (!targetGuild) {
    return interaction.reply({ content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", ephemeral: true });
  }

  const ch = findInviteChannel(targetGuild);
  if (!ch) {
    return interaction.reply({
      content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ‡πÉ‡∏ô **${targetGuild.name}** (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Create Invite)`,
      ephemeral: true,
    });
  }

  try {
    // ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const invite = await ch.createInvite({ maxAge: 86400, maxUses: 0, unique: true });
    const url = invite.url ?? `https://discord.gg/${invite.code}`;

    await interaction.reply({
      content: `**${targetGuild.name}**: ${url}`,
      ephemeral: true, // ‚úÖ ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    });
  } catch (e) {
    console.error("createInvite error:", e);
    await interaction.reply({
      content: `‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô **${targetGuild.name}** (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Create Invite)`,
      ephemeral: true,
    });
  }
});


client.login(process.env.token);
