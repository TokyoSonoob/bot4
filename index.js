// index.js
require('dotenv').config();
const fs = require('fs');          // ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
const path = require('path');
const puppeteer = require('puppeteer-extra');
const Stealth = require('puppeteer-extra-plugin-stealth');
const cron = require('node-cron');
puppeteer.use(Stealth());

// polyfill fetch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node < 18 (‡∏ö‡∏ô Node 18+ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ)
if (typeof fetch === 'undefined') {
  global.fetch = (...args) => import('node-fetch').then(({ default: f }) => f(...args));
}

/* ------------------- health server (no express) ------------------- */
let externalServerLoaded = false;
try { require('./server'); externalServerLoaded = true; } catch {}
const PORT = process.env.PORT || 10000;
if (!externalServerLoaded) {
  const http = require('http');
  const server = http.createServer((req, res) => {
    if (req.url === '/' || req.url === '/healthz') {
      res.writeHead(200, { 'Content-Type': 'text/plain' });
      res.end('ok');
    } else {
      res.writeHead(404, { 'Content-Type': 'text/plain' });
      res.end('not found');
    }
  });
  server.listen(PORT, () => console.log(`üåê Health server on :${PORT}`));
}

/* ------------------- runtime switches ------------------- */
const ON_RENDER = !!(process.env.RENDER || process.env.RENDER_EXTERNAL_URL);
const HEADLESS = ON_RENDER ? 'new' : false; // local = ‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≠, Render = headless
const SELF_URL = (process.env.RENDER_EXTERNAL_URL || process.env.KEEPALIVE_URL || '').replace(/\/$/, '');
if (ON_RENDER && SELF_URL) {
  setInterval(async () => {
    try { const r = await fetch(SELF_URL + '/healthz', { cache: 'no-store' }); console.log(`‚ôªÔ∏è keep-alive ${r.status}`); }
    catch (e) { console.log('‚ôªÔ∏è keep-alive failed:', e.message); }
  }, 9 * 60 * 1000);
}

/* ------------------- ENV (3 keys: cookies/email/password) ------------------- */
const COOKIES_ENV = process.env.cookies || '';  // JSON array ‡∏´‡∏£‡∏∑‡∏≠ Base64(JSON array)
const EMAIL = process.env.email || '';
const PASSWORD = process.env.password || '';

/* ------------------- config ------------------- */
const GROUP_URLS = [
  'https://web.facebook.com/groups/communitycraft',
  'https://web.facebook.com/groups/506463258587188',
];

const POST_MESSAGE = `‚úøÔΩ•Ôæü: ‚úßÔΩ•Ôæü: ùó¶ùó≤ùóÆ ùó†ùòÇùòÑùòÑ :ÔΩ•Ôæü‚úß:ÔΩ•Ôæü‚úø

‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
   ‡∏£‡∏±‡∏ö‡∏ó‡∏≥ ùë®ùíÖùíÖ-ùíêùíè ‚Ä¢ ùë∫ùíåùíäùíè ‚Ä¢ ùë™ùíêùíéùíéùíäùíîùíîùíäùíêùíè
                  ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‚ô°
‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà

              ùë®ùíÖùíÖùíêùíè ùë∫ùíåùíäùíè
        ‚Çä Àö‚äπ‚ô° ùë∂ùíëùíïùíäùíêùíèùíî ‚ô°‚äπÀö‚Çä
          ‚Ä¢ ‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö 30.-
          ‚Ä¢ ‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö 20.-
          ‚Ä¢ ‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà 35.-
          ‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å 25.-
          ‚Ä¢ ‡∏õ‡∏≠‡∏¢‡∏ú‡∏° & ‡∏à‡∏∏‡∏Å‡∏ú‡∏° ‡∏à‡∏∏‡∏î‡∏•‡∏∞ 10.-
          ‚Ä¢ ‡∏ï‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á 35.-
          ‚Ä¢ ‡∏ï‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö 100.-

  ‚ãÜÀô‚ü°‚ô°‚ü°Àô‚ãÜ ‚úß ùë∫ùíåùíäùíè 5 ‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô ‚úß ‚ãÜÀô‚ü°‚ô°‚ü°Àô‚ãÜ

          ùë¥ùíñùíô - ùë∫ùíåùíö - ùëØùíäùíåùíÜùëüùíä - ùëµùë± - ùë≤ùíäùíé
       ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á - ‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î

   ‚ú¶‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå ‚Ä¢ ‡∏û‡∏∏‡∏ò ‚Ä¢ ‡∏®‡∏∏‡∏Å‡∏£‡πå ‚ú¶‚Ä¢
             ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ

    ìÜ©‚ô°ìÜ™ ‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏¢‡∏¢‡∏¢
    https://discord.gg/jHhQETebMm
`;

const COMPOSER_KEYWORDS = [
  '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå', '‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á', '‡πÇ‡∏û‡∏™‡∏ï‡πå',
  'Write something', 'Create post', "What's on your mind"
];
const POST_BUTTON_ARIA = ['‡πÇ‡∏û‡∏™‡∏ï‡πå', 'Post', '‡πÅ‡∏ä‡∏£‡πå', 'Share'];

const delay = (ms) => new Promise((r) => setTimeout(r, ms));
const jitter = (minMs, maxMs) => Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;

/* ------------------- cookies loader (ENV only) ------------------- */
function parseCookies(raw) {
  if (!raw) return null;
  // ‡∏•‡∏≠‡∏á parse JSON ‡∏ï‡∏£‡∏á ‡πÜ
  try { const arr = JSON.parse(raw); if (Array.isArray(arr)) return arr; } catch {}
  // ‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏î Base64 ‚Üí JSON
  try { const txt = Buffer.from(raw, 'base64').toString('utf8'); const arr = JSON.parse(txt); if (Array.isArray(arr)) return arr; } catch {}
  return null;
}
async function loadCookies(page) {
  const arr = parseCookies(COOKIES_ENV);
  if (!arr) { console.log('‚ÑπÔ∏è ENV cookies ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î'); return false; }
  try { await page.setCookie(...arr); console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î cookies ‡∏à‡∏≤‡∏Å ENV (${arr.length})`); return true; }
  catch (e) { console.log('‚ùå setCookie ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', e.message); return false; }
}
// ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠ (no-op)
async function exportCookies() { /* no-op */ }

/* ------------------- helpers ------------------- */
async function findButtonByText(page, keywords, { role = 'button', exclude = ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô'] } = {}) {
  const handles = await page.$$(`div[role="${role}"], span[role="${role}"], a[role="${role}"], button`);
  for (const h of handles) {
    const text = (await page.evaluate((el) => el.innerText || el.getAttribute('aria-label') || '', h)).trim();
    if (!text) continue;
    if (exclude.some((ex) => text.includes(ex))) continue;
    if (keywords.some((k) => text.toLowerCase().includes(k.toLowerCase()))) return h;
  }
  return null;
}
async function getComposerTextbox(page) {
  const selectors = [
    'div[role="dialog"] div[role="textbox"]',
    'div[role="dialog"] [contenteditable="true"][role="textbox"]',
    'div[aria-label][role="textbox"]',
    '[contenteditable="true"][role="textbox"]',
    'div[role="textbox"]',
  ];
  for (const sel of selectors) {
    const el = await page.$(sel);
    if (el) return { el, sel };
  }
  return null;
}

/* ------------------- login fallback (email/password) ------------------- */
async function ensureLoggedIn(page) {
  if (!(page.url().includes('facebook.com/login') || page.url().includes('checkpoint'))) return true;
  if (!EMAIL || !PASSWORD) { console.log('‚ùå ‡∏´‡∏ô‡πâ‡∏≤ login/checkpoint ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ email/password ‡πÉ‡∏ô ENV'); return false; }

  console.log('üîê ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ email/password ...');
  try {
    await page.waitForSelector('#email', { timeout: 15000 });
    await page.type('#email', EMAIL, { delay: 40 });
    await page.type('#pass', PASSWORD, { delay: 40 });
    const loginBtn = await page.$('button[name="login"], #loginbutton');
    if (loginBtn) await loginBtn.click(); else await page.keyboard.press('Enter');

    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 45000 });
    if (page.url().includes('checkpoint')) {
      console.log('‚ö†Ô∏è ‡∏ï‡∏¥‡∏î checkpoint ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô');
      return false;
    }
    console.log('‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    await exportCookies(); // no-op
    return true;
  } catch (e) {
    console.log('‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', e.message);
    return false;
  }
}

/* ------------------- dialog/media/post ------------------- */
async function clickComposer(page) {
  let btn = await findButtonByText(page, COMPOSER_KEYWORDS, { role: 'button', exclude: ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô'] });
  if (!btn) {
    const xpathCandidates = [
      `//div[@role="button" and (contains(., "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô") or contains(., "‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á") or contains(., "‡πÇ‡∏û‡∏™‡∏ï‡πå")) and not(contains(., "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"))]`,
      `//div[@role="button" and (contains(., "Write something") or contains(., "Create post") or contains(., "What's on your mind"))]`,
      `//span[(contains(., "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô") or contains(., "‡πÇ‡∏û‡∏™‡∏ï‡πå")) and not(contains(., "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"))]/ancestor::div[@role="button"]`,
    ];
    for (const xp of xpathCandidates) { const [h] = await page.$x(xp); if (h) { btn = h; break; } }
  }
  if (!btn) return false;
  await btn.click();
  return true;
}
async function clickPostButton(page) {
  for (const label of POST_BUTTON_ARIA) {
    const sel = `div[role="dialog"] [aria-label="${label}"], [aria-label="${label}"]`;
    const el = await page.$(sel);
    if (el) { await el.click(); return true; }
  }
  const [fallback] = await page.$x(
    `//div[@role="dialog"]//div[@role="button"][not(@aria-disabled="true") and (contains(., "‡πÇ‡∏û‡∏™‡∏ï‡πå") or contains(., "Post") or contains(., "‡πÅ‡∏ä‡∏£‡πå") or contains(., "Share"))]`
  );
  if (fallback) { await fallback.click(); return true; }
  return false;
}
async function waitForMediaPreviewInDialog(page, timeout = 25000) {
  const start = Date.now();
  while (Date.now() - start < timeout) {
    const ok = await page.evaluate(() => {
      const dlg = document.querySelector('div[role="dialog"]');
      if (!dlg) return false;
      const hasImg = dlg.querySelector('img[src^="blob:"]') ||
                     dlg.querySelector('img[alt*="‡∏£‡∏π‡∏õ"], img[alt*="photo"], img[alt*="image"], img[alt*="‡∏†‡∏≤‡∏û"]');
      const hasVideo = dlg.querySelector('video') ||
                       dlg.querySelector('div[aria-label*="‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"], div[aria-label*="Video"]');
      return !!(hasImg || hasVideo);
    });
    if (ok) return true;
    await delay(500);
  }
  return false;
}
async function uploadMediaToComposer(page, absolutePaths = []) {
  if (!absolutePaths.length) return true;

  const addMediaSelectors = [
    'div[role="dialog"] div[aria-label="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"]',
    'div[role="dialog"] div[aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"]',
    'div[role="dialog"] div[aria-label="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"]',
    'div[role="dialog"] div[aria-label="‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"]',
    'div[role="dialog"] div[aria-label="Photo/Video"]',
    'div[role="dialog"] div[aria-label="Add photo/video"]',
  ];
  for (const sel of addMediaSelectors) { const btn = await page.$(sel); if (btn) { await btn.click(); break; } }

  const inputSelectors = [
    'div[role="dialog"] input[type="file"][accept*="image"], div[role="dialog"] input[type="file"][accept*="video"]',
    'div[role="dialog"] input[type="file"][multiple]',
    'div[role="dialog"] input[type="file"]',
  ];
  let inputs = [];
  for (const sel of inputSelectors) { const hs = await page.$$(sel); if (hs.length) { inputs = hs; break; } }
  if (!inputs.length) {
    await delay(1500);
    for (const sel of inputSelectors) { const hs = await page.$$(sel); if (hs.length) { inputs = hs; break; } }
  }
  if (!inputs.length) { console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö input[type=file] ‡πÉ‡∏ô dialog'); return false; }

  console.log(`üîé ‡∏û‡∏ö input[type=file] ${inputs.length} ‡∏ä‡πà‡∏≠‡∏á ‚Äî ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ${absolutePaths.length} ‡πÑ‡∏ü‡∏•‡πå...`);
  let uploaded = false;
  for (const h of inputs) {
    try {
      if (typeof h.setInputFiles === 'function') {
        await h.setInputFiles(absolutePaths);
      } else {
        for (const p of absolutePaths) await h.uploadFile(p);
      }
      uploaded = true; break;
    } catch {}
  }
  if (!uploaded) { console.log('‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ input ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); return false; }

  const ok = await waitForMediaPreviewInDialog(page, 25000);
  console.log(ok ? 'üì∏/üé¨ ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‚ö†Ô∏è ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß');
  if (!ok) await delay(4000);
  return true;
}
async function closeAnyDialog(page) {
  try {
    await page.evaluate(() => {
      const dlg = document.querySelector('div[role="dialog"]');
      if (!dlg) return;
      const btns = Array.from(dlg.querySelectorAll('div[role="button"],button'));
      const closeBtn = btns.find(
        (b) =>
          /‡∏õ‡∏¥‡∏î|Close|‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å|Cancel/i.test(b.innerText || '') ||
          (b.getAttribute('aria-label') || '').match(/‡∏õ‡∏¥‡∏î|Close|‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å|Cancel/i)
      );
      closeBtn?.click();
    });
    await delay(800);
  } catch {}
}

/* ------------------- core flow ------------------- */
async function postToGroup(page, groupUrl, message) {
  console.log(`\n‚û°Ô∏è ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groupUrl}`);
  await page.goto(groupUrl, { waitUntil: 'networkidle2', timeout: 60000 });

  if (!(await ensureLoggedIn(page))) return false;
  await delay(2000);

  let opened = await clickComposer(page);
  if (!opened) {
    console.log('‚ö†Ô∏è ‡∏´‡∏≤ ‚Äú‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‚Äù ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1 ‚Üí ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤');
    await page.evaluate(() => window.scrollBy(0, 900));
    await delay(1200);
    opened = await clickComposer(page);
  }
  if (!opened) { console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå'); return false; }

  await delay(1500);

  const imagePath = path.resolve('./test.png');
  const videoPath = path.resolve('./main.mp4');
  const mediaPaths = [imagePath, videoPath].filter((p) => fs.existsSync(p));
  if (mediaPaths.length) { await uploadMediaToComposer(page, mediaPaths); }
  else { console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö test.png/main.mp4 ‚Äî ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'); }

  await page.waitForSelector('div[role="dialog"]', { timeout: 20000 });
  let textbox = await getComposerTextbox(page);
  if (!textbox) { await delay(900); textbox = await getComposerTextbox(page); }
  if (!textbox) { console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå'); return false; }

  await textbox.el.focus();
  await page.type(textbox.sel, message, { delay: 40 });
  await delay(800);

  await page.waitForFunction(() => {
    const dlg = document.querySelector('div[role="dialog"]'); if (!dlg) return false;
    const btns = Array.from(dlg.querySelectorAll('div[role="button"],button'));
    const btn = btns.find((el) => /‡πÇ‡∏û‡∏™‡∏ï‡πå|Post|‡πÅ‡∏ä‡∏£‡πå|Share/i.test(el.innerText || el.getAttribute('aria-label') || ''));
    if (!btn) return false;
    const disabled = btn.getAttribute('aria-disabled') === 'true' || (btn.className || '').includes('disabled');
    return !disabled;
  }, { timeout: 30000 }).catch(() => {});

  const posted = await clickPostButton(page);
  if (!posted) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÇ‡∏û‡∏™‡∏ï‡πå‚Äù/Post');
    await page.screenshot({ path: `cannot_find_post_button_${Date.now()}.png` });
    return false;
  }

  console.log('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå...');
  await page.waitForFunction(() => !document.querySelector('div[role="dialog"]'), { timeout: 45000 }).catch(() => {});
  console.log('‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤)');
  return true;
}

/* ------------------- runner / cron ------------------- */
let isRunning = false;
async function safeRun() {
  if (isRunning) { console.log('‚è≥ ‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≠‡∏ö'); return; }
  isRunning = true;
  try { await run(); }
  catch (e) { console.error('‚ùå run() ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', e); }
  finally { isRunning = false; }
}

cron.schedule('0 12 * * *', () => { console.log('üïõ 12:00 ICT ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå'); safeRun(); }, { timezone: 'Asia/Bangkok' });
cron.schedule('0 0 * * *',  () => { console.log('üïõ 00:00 ICT ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå'); safeRun(); }, { timezone: 'Asia/Bangkok' });

async function run() {
  const browser = await puppeteer.launch({
    headless: HEADLESS,
    defaultViewport: { width: 1366, height: 864 },
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-gpu',
      '--disable-dev-shm-usage',
      '--lang=th-TH,th,en-US,en',
      '--disable-blink-features=AutomationControlled',
    ],
  });

  const page = await browser.newPage();
  await page.setUserAgent(
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
  );
  await page.setExtraHTTPHeaders({ 'Accept-Language': 'th-TH,th;q=0.9,en-US;q=0.8,en;q=0.7' });
  await page.setBypassCSP(true);

  await loadCookies(page);

  // ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏Æ‡∏°‡πÄ‡∏û‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡πÅ‡∏•‡∏∞ trigger redirect ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  try { await page.goto('https://web.facebook.com/', { waitUntil: 'domcontentloaded', timeout: 60000 }); } catch {}

  for (let i = 0; i < GROUP_URLS.length; i++) {
    const url = GROUP_URLS[i];
    try {
      if (i === 0 && (page.url().includes('login') || page.url().includes('checkpoint'))) {
        if (!(await ensureLoggedIn(page))) { await browser.close(); return; }
      }

      await closeAnyDialog(page);
      const ok = await postToGroup(page, url, POST_MESSAGE);

      await exportCookies(); // no-op

      if (i < GROUP_URLS.length - 1) {
        const waitMs = jitter(5000, 9000);
        console.log(`üïí ‡∏£‡∏≠ ${Math.round(waitMs / 1000)} ‡∏ß‡∏¥ ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...`);
        await delay(waitMs);
      }

      if (!ok) console.log('‚ö†Ô∏è ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (err) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ${url}:`, err.message);
      await delay(jitter(4000, 8000));
    }
  }

  await browser.close();
}

// ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ start (‡∏ó‡∏±‡πâ‡∏á Local/Render)
if (require.main === module) { safeRun(); }
module.exports = { run: safeRun };
